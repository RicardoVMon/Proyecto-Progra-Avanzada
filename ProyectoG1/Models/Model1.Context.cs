//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProyectoG1.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EncuentraTCUEntities : DbContext
    {
        public EncuentraTCUEntities()
            : base("name=EncuentraTCUEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Auditoria> Auditoria { get; set; }
        public virtual DbSet<Conexion> Conexion { get; set; }
        public virtual DbSet<Estudiante> Estudiante { get; set; }
        public virtual DbSet<Genero> Genero { get; set; }
        public virtual DbSet<Institucion> Institucion { get; set; }
        public virtual DbSet<Postulacion> Postulacion { get; set; }
        public virtual DbSet<Proyecto> Proyecto { get; set; }
        public virtual DbSet<Rol> Rol { get; set; }
        public virtual DbSet<TipoInstitucion> TipoInstitucion { get; set; }
        public virtual DbSet<Universidad> Universidad { get; set; }
    
        public virtual int ActualizarContrasenna(string cedula, Nullable<int> tipoCedula, string contrasennaTemp, Nullable<bool> tieneContrasennaTemp, Nullable<System.DateTime> fechaVencimientoTemp)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var tipoCedulaParameter = tipoCedula.HasValue ?
                new ObjectParameter("TipoCedula", tipoCedula) :
                new ObjectParameter("TipoCedula", typeof(int));
    
            var contrasennaTempParameter = contrasennaTemp != null ?
                new ObjectParameter("ContrasennaTemp", contrasennaTemp) :
                new ObjectParameter("ContrasennaTemp", typeof(string));
    
            var tieneContrasennaTempParameter = tieneContrasennaTemp.HasValue ?
                new ObjectParameter("TieneContrasennaTemp", tieneContrasennaTemp) :
                new ObjectParameter("TieneContrasennaTemp", typeof(bool));
    
            var fechaVencimientoTempParameter = fechaVencimientoTemp.HasValue ?
                new ObjectParameter("FechaVencimientoTemp", fechaVencimientoTemp) :
                new ObjectParameter("FechaVencimientoTemp", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarContrasenna", cedulaParameter, tipoCedulaParameter, contrasennaTempParameter, tieneContrasennaTempParameter, fechaVencimientoTempParameter);
        }
    
        public virtual int ActualizarPerfilEstudiante(Nullable<long> idEstudiante, Nullable<long> idUniversidad, string carrera, string email, string descripcion)
        {
            var idEstudianteParameter = idEstudiante.HasValue ?
                new ObjectParameter("IdEstudiante", idEstudiante) :
                new ObjectParameter("IdEstudiante", typeof(long));
    
            var idUniversidadParameter = idUniversidad.HasValue ?
                new ObjectParameter("IdUniversidad", idUniversidad) :
                new ObjectParameter("IdUniversidad", typeof(long));
    
            var carreraParameter = carrera != null ?
                new ObjectParameter("Carrera", carrera) :
                new ObjectParameter("Carrera", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarPerfilEstudiante", idEstudianteParameter, idUniversidadParameter, carreraParameter, emailParameter, descripcionParameter);
        }
    
        public virtual ObjectResult<DatosEstudiante_Result> DatosEstudiante(Nullable<long> idEstudiante)
        {
            var idEstudianteParameter = idEstudiante.HasValue ?
                new ObjectParameter("IdEstudiante", idEstudiante) :
                new ObjectParameter("IdEstudiante", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DatosEstudiante_Result>("DatosEstudiante", idEstudianteParameter);
        }
    
        public virtual ObjectResult<IngresoSistema_Result> IngresoSistema(string cedula, string contrasenna, Nullable<int> tipoCedula)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var contrasennaParameter = contrasenna != null ?
                new ObjectParameter("Contrasenna", contrasenna) :
                new ObjectParameter("Contrasenna", typeof(string));
    
            var tipoCedulaParameter = tipoCedula.HasValue ?
                new ObjectParameter("TipoCedula", tipoCedula) :
                new ObjectParameter("TipoCedula", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IngresoSistema_Result>("IngresoSistema", cedulaParameter, contrasennaParameter, tipoCedulaParameter);
        }
    
        public virtual int RegistrarEstudiante(Nullable<long> idGenero, Nullable<long> idUniversidad, string cedula, string email, string contrasenna, string nombre, string apellidos, string descripcion, string carrera)
        {
            var idGeneroParameter = idGenero.HasValue ?
                new ObjectParameter("IdGenero", idGenero) :
                new ObjectParameter("IdGenero", typeof(long));
    
            var idUniversidadParameter = idUniversidad.HasValue ?
                new ObjectParameter("IdUniversidad", idUniversidad) :
                new ObjectParameter("IdUniversidad", typeof(long));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contrasennaParameter = contrasenna != null ?
                new ObjectParameter("Contrasenna", contrasenna) :
                new ObjectParameter("Contrasenna", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var carreraParameter = carrera != null ?
                new ObjectParameter("Carrera", carrera) :
                new ObjectParameter("Carrera", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarEstudiante", idGeneroParameter, idUniversidadParameter, cedulaParameter, emailParameter, contrasennaParameter, nombreParameter, apellidosParameter, descripcionParameter, carreraParameter);
        }
    
        public virtual int RegistrarInstitucion(Nullable<long> idTipoInstitucion, string cedula, string email, string contrasenna, string nombre, string descripcion, string telefono, string paginaWeb)
        {
            var idTipoInstitucionParameter = idTipoInstitucion.HasValue ?
                new ObjectParameter("IdTipoInstitucion", idTipoInstitucion) :
                new ObjectParameter("IdTipoInstitucion", typeof(long));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contrasennaParameter = contrasenna != null ?
                new ObjectParameter("Contrasenna", contrasenna) :
                new ObjectParameter("Contrasenna", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var paginaWebParameter = paginaWeb != null ?
                new ObjectParameter("PaginaWeb", paginaWeb) :
                new ObjectParameter("PaginaWeb", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarInstitucion", idTipoInstitucionParameter, cedulaParameter, emailParameter, contrasennaParameter, nombreParameter, descripcionParameter, telefonoParameter, paginaWebParameter);
        }
    }
}
